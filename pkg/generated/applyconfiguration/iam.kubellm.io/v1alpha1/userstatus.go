/*
Copyright 2025 The Kubellm Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	iamkubellmiov1alpha1 "github.com/kubellm-io/kubellm/pkg/apis/iam.kubellm.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// UserStatusApplyConfiguration represents a declarative configuration of the UserStatus type for use
// with apply.
type UserStatusApplyConfiguration struct {
	State                   *iamkubellmiov1alpha1.UserState      `json:"state,omitempty"`
	Reason                  *string                              `json:"reason,omitempty"`
	Message                 *string                              `json:"message,omitempty"`
	LastTransitionTime      *v1.Time                             `json:"lastTransitionTime,omitempty"`
	LastLoginTime           *v1.Time                             `json:"lastLoginTime,omitempty"`
	LastLoginIP             *string                              `json:"lastLoginIp,omitempty"`
	FailedLoginAttempts     *int32                               `json:"failedLoginAttempts,omitempty"`
	PasswordExpiryTime      *v1.Time                             `json:"passwordExpiryTime,omitempty"`
	PasswordLastChangedTime *v1.Time                             `json:"passwordLastChangedTime,omitempty"`
	Conditions              []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// UserStatusApplyConfiguration constructs a declarative configuration of the UserStatus type for use with
// apply.
func UserStatus() *UserStatusApplyConfiguration {
	return &UserStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithState(value iamkubellmiov1alpha1.UserState) *UserStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithReason(value string) *UserStatusApplyConfiguration {
	b.Reason = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithMessage(value string) *UserStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithLastTransitionTime sets the LastTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTransitionTime field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithLastTransitionTime(value v1.Time) *UserStatusApplyConfiguration {
	b.LastTransitionTime = &value
	return b
}

// WithLastLoginTime sets the LastLoginTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastLoginTime field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithLastLoginTime(value v1.Time) *UserStatusApplyConfiguration {
	b.LastLoginTime = &value
	return b
}

// WithLastLoginIP sets the LastLoginIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastLoginIP field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithLastLoginIP(value string) *UserStatusApplyConfiguration {
	b.LastLoginIP = &value
	return b
}

// WithFailedLoginAttempts sets the FailedLoginAttempts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailedLoginAttempts field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithFailedLoginAttempts(value int32) *UserStatusApplyConfiguration {
	b.FailedLoginAttempts = &value
	return b
}

// WithPasswordExpiryTime sets the PasswordExpiryTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PasswordExpiryTime field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithPasswordExpiryTime(value v1.Time) *UserStatusApplyConfiguration {
	b.PasswordExpiryTime = &value
	return b
}

// WithPasswordLastChangedTime sets the PasswordLastChangedTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PasswordLastChangedTime field is set to the value of the last call.
func (b *UserStatusApplyConfiguration) WithPasswordLastChangedTime(value v1.Time) *UserStatusApplyConfiguration {
	b.PasswordLastChangedTime = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *UserStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *UserStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
