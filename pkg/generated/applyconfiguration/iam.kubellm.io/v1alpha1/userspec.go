/*
Copyright 2025 The Kubellm Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// UserSpecApplyConfiguration represents a declarative configuration of the UserSpec type for use
// with apply.
type UserSpecApplyConfiguration struct {
	DisplayName      *string  `json:"displayName,omitempty"`
	Email            *string  `json:"email,omitempty"`
	Password         *string  `json:"password,omitempty"`
	Lang             *string  `json:"lang,omitempty"`
	Description      *string  `json:"description,omitempty"`
	Groups           []string `json:"groups,omitempty"`
	PhoneNumber      *string  `json:"phoneNumber,omitempty"`
	Avatar           *string  `json:"avatar,omitempty"`
	Department       *string  `json:"department,omitempty"`
	Position         *string  `json:"position,omitempty"`
	ExternalID       *string  `json:"externalID,omitempty"`
	IdentityProvider *string  `json:"identityProvider,omitempty"`
	LoginDisabled    *bool    `json:"loginDisabled,omitempty"`
}

// UserSpecApplyConfiguration constructs a declarative configuration of the UserSpec type for use with
// apply.
func UserSpec() *UserSpecApplyConfiguration {
	return &UserSpecApplyConfiguration{}
}

// WithDisplayName sets the DisplayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisplayName field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithDisplayName(value string) *UserSpecApplyConfiguration {
	b.DisplayName = &value
	return b
}

// WithEmail sets the Email field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Email field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithEmail(value string) *UserSpecApplyConfiguration {
	b.Email = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithPassword(value string) *UserSpecApplyConfiguration {
	b.Password = &value
	return b
}

// WithLang sets the Lang field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Lang field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithLang(value string) *UserSpecApplyConfiguration {
	b.Lang = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithDescription(value string) *UserSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithGroups adds the given value to the Groups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Groups field.
func (b *UserSpecApplyConfiguration) WithGroups(values ...string) *UserSpecApplyConfiguration {
	for i := range values {
		b.Groups = append(b.Groups, values[i])
	}
	return b
}

// WithPhoneNumber sets the PhoneNumber field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhoneNumber field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithPhoneNumber(value string) *UserSpecApplyConfiguration {
	b.PhoneNumber = &value
	return b
}

// WithAvatar sets the Avatar field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Avatar field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithAvatar(value string) *UserSpecApplyConfiguration {
	b.Avatar = &value
	return b
}

// WithDepartment sets the Department field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Department field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithDepartment(value string) *UserSpecApplyConfiguration {
	b.Department = &value
	return b
}

// WithPosition sets the Position field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Position field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithPosition(value string) *UserSpecApplyConfiguration {
	b.Position = &value
	return b
}

// WithExternalID sets the ExternalID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalID field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithExternalID(value string) *UserSpecApplyConfiguration {
	b.ExternalID = &value
	return b
}

// WithIdentityProvider sets the IdentityProvider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IdentityProvider field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithIdentityProvider(value string) *UserSpecApplyConfiguration {
	b.IdentityProvider = &value
	return b
}

// WithLoginDisabled sets the LoginDisabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoginDisabled field is set to the value of the last call.
func (b *UserSpecApplyConfiguration) WithLoginDisabled(value bool) *UserSpecApplyConfiguration {
	b.LoginDisabled = &value
	return b
}
