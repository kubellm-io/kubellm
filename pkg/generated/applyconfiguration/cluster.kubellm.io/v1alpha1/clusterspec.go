/*
Copyright 2025 The Kubellm Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ClusterSpecApplyConfiguration represents a declarative configuration of the ClusterSpec type for use
// with apply.
type ClusterSpecApplyConfiguration struct {
	ID                          *string                                 `json:"id,omitempty"`
	DisplayName                 *string                                 `json:"displayName,omitempty"`
	APIEndpoint                 *string                                 `json:"apiEndpoint,omitempty"`
	SecretRef                   *LocalSecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ImpersonatorSecretRef       *LocalSecretReferenceApplyConfiguration `json:"impersonatorSecretRef,omitempty"`
	InsecureSkipTLSVerification *bool                                   `json:"insecureSkipTLSVerification,omitempty"`
	ProxyURL                    *string                                 `json:"proxyURL,omitempty"`
	ProxyHeader                 map[string]string                       `json:"proxyHeader,omitempty"`
	Provider                    *string                                 `json:"provider,omitempty"`
	Region                      *string                                 `json:"region,omitempty"`
	Taints                      []v1.Taint                              `json:"taints,omitempty"`
	ResourceModels              []ResourceModelApplyConfiguration       `json:"resourceModels,omitempty"`
}

// ClusterSpecApplyConfiguration constructs a declarative configuration of the ClusterSpec type for use with
// apply.
func ClusterSpec() *ClusterSpecApplyConfiguration {
	return &ClusterSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithID(value string) *ClusterSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithDisplayName sets the DisplayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisplayName field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithDisplayName(value string) *ClusterSpecApplyConfiguration {
	b.DisplayName = &value
	return b
}

// WithAPIEndpoint sets the APIEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIEndpoint field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithAPIEndpoint(value string) *ClusterSpecApplyConfiguration {
	b.APIEndpoint = &value
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithSecretRef(value *LocalSecretReferenceApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.SecretRef = value
	return b
}

// WithImpersonatorSecretRef sets the ImpersonatorSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImpersonatorSecretRef field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithImpersonatorSecretRef(value *LocalSecretReferenceApplyConfiguration) *ClusterSpecApplyConfiguration {
	b.ImpersonatorSecretRef = value
	return b
}

// WithInsecureSkipTLSVerification sets the InsecureSkipTLSVerification field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InsecureSkipTLSVerification field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithInsecureSkipTLSVerification(value bool) *ClusterSpecApplyConfiguration {
	b.InsecureSkipTLSVerification = &value
	return b
}

// WithProxyURL sets the ProxyURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProxyURL field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithProxyURL(value string) *ClusterSpecApplyConfiguration {
	b.ProxyURL = &value
	return b
}

// WithProxyHeader puts the entries into the ProxyHeader field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ProxyHeader field,
// overwriting an existing map entries in ProxyHeader field with the same key.
func (b *ClusterSpecApplyConfiguration) WithProxyHeader(entries map[string]string) *ClusterSpecApplyConfiguration {
	if b.ProxyHeader == nil && len(entries) > 0 {
		b.ProxyHeader = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ProxyHeader[k] = v
	}
	return b
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithProvider(value string) *ClusterSpecApplyConfiguration {
	b.Provider = &value
	return b
}

// WithRegion sets the Region field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Region field is set to the value of the last call.
func (b *ClusterSpecApplyConfiguration) WithRegion(value string) *ClusterSpecApplyConfiguration {
	b.Region = &value
	return b
}

// WithTaints adds the given value to the Taints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Taints field.
func (b *ClusterSpecApplyConfiguration) WithTaints(values ...v1.Taint) *ClusterSpecApplyConfiguration {
	for i := range values {
		b.Taints = append(b.Taints, values[i])
	}
	return b
}

// WithResourceModels adds the given value to the ResourceModels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResourceModels field.
func (b *ClusterSpecApplyConfiguration) WithResourceModels(values ...*ResourceModelApplyConfiguration) *ClusterSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResourceModels")
		}
		b.ResourceModels = append(b.ResourceModels, *values[i])
	}
	return b
}
