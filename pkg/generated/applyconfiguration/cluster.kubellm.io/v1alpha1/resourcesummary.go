/*
Copyright 2025 The Kubellm Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// ResourceSummaryApplyConfiguration represents a declarative configuration of the ResourceSummary type for use
// with apply.
type ResourceSummaryApplyConfiguration struct {
	Allocatable          *v1.ResourceList                        `json:"allocatable,omitempty"`
	Allocating           *v1.ResourceList                        `json:"allocating,omitempty"`
	Allocated            *v1.ResourceList                        `json:"allocated,omitempty"`
	AllocatableModelings []AllocatableModelingApplyConfiguration `json:"allocatableModelings,omitempty"`
}

// ResourceSummaryApplyConfiguration constructs a declarative configuration of the ResourceSummary type for use with
// apply.
func ResourceSummary() *ResourceSummaryApplyConfiguration {
	return &ResourceSummaryApplyConfiguration{}
}

// WithAllocatable sets the Allocatable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Allocatable field is set to the value of the last call.
func (b *ResourceSummaryApplyConfiguration) WithAllocatable(value v1.ResourceList) *ResourceSummaryApplyConfiguration {
	b.Allocatable = &value
	return b
}

// WithAllocating sets the Allocating field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Allocating field is set to the value of the last call.
func (b *ResourceSummaryApplyConfiguration) WithAllocating(value v1.ResourceList) *ResourceSummaryApplyConfiguration {
	b.Allocating = &value
	return b
}

// WithAllocated sets the Allocated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Allocated field is set to the value of the last call.
func (b *ResourceSummaryApplyConfiguration) WithAllocated(value v1.ResourceList) *ResourceSummaryApplyConfiguration {
	b.Allocated = &value
	return b
}

// WithAllocatableModelings adds the given value to the AllocatableModelings field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllocatableModelings field.
func (b *ResourceSummaryApplyConfiguration) WithAllocatableModelings(values ...*AllocatableModelingApplyConfiguration) *ResourceSummaryApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAllocatableModelings")
		}
		b.AllocatableModelings = append(b.AllocatableModelings, *values[i])
	}
	return b
}
