/*
Copyright 2025 The Kubellm Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ClusterStatusApplyConfiguration represents a declarative configuration of the ClusterStatus type for use
// with apply.
type ClusterStatusApplyConfiguration struct {
	KubernetesVersion *string                            `json:"kubernetesVersion,omitempty"`
	APIEnablements    []APIEnablementApplyConfiguration  `json:"apiEnablements,omitempty"`
	Conditions        []v1.ConditionApplyConfiguration   `json:"conditions,omitempty"`
	NodeSummary       *NodeSummaryApplyConfiguration     `json:"nodeSummary,omitempty"`
	ResourceSummary   *ResourceSummaryApplyConfiguration `json:"resourceSummary,omitempty"`
	RemedyActions     []string                           `json:"remedyActions,omitempty"`
}

// ClusterStatusApplyConfiguration constructs a declarative configuration of the ClusterStatus type for use with
// apply.
func ClusterStatus() *ClusterStatusApplyConfiguration {
	return &ClusterStatusApplyConfiguration{}
}

// WithKubernetesVersion sets the KubernetesVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubernetesVersion field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithKubernetesVersion(value string) *ClusterStatusApplyConfiguration {
	b.KubernetesVersion = &value
	return b
}

// WithAPIEnablements adds the given value to the APIEnablements field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the APIEnablements field.
func (b *ClusterStatusApplyConfiguration) WithAPIEnablements(values ...*APIEnablementApplyConfiguration) *ClusterStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAPIEnablements")
		}
		b.APIEnablements = append(b.APIEnablements, *values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ClusterStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *ClusterStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithNodeSummary sets the NodeSummary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSummary field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithNodeSummary(value *NodeSummaryApplyConfiguration) *ClusterStatusApplyConfiguration {
	b.NodeSummary = value
	return b
}

// WithResourceSummary sets the ResourceSummary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceSummary field is set to the value of the last call.
func (b *ClusterStatusApplyConfiguration) WithResourceSummary(value *ResourceSummaryApplyConfiguration) *ClusterStatusApplyConfiguration {
	b.ResourceSummary = value
	return b
}

// WithRemedyActions adds the given value to the RemedyActions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RemedyActions field.
func (b *ClusterStatusApplyConfiguration) WithRemedyActions(values ...string) *ClusterStatusApplyConfiguration {
	for i := range values {
		b.RemedyActions = append(b.RemedyActions, values[i])
	}
	return b
}
